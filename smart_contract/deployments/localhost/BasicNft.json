{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BasicNft__DontHaveEnoughTokensToMintNFT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BasicNft__RoyalityFeesPercentageLimitExceed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BasicNft__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BasicNft__YouDidntProvideApprovalOFTokensForNFTMinting",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getFirstOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyalityFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_noOfBips",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "mintNft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd06a3829cd19f1c0837d81bb8ef57b4faa19c596cb66e2f60c200aab80396996",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2693514",
    "logsBloom": "0x
    "blockHash": "0x0fc79787927f52e46a280d4113263311b36ae9963b4eb8783529acdabded8e59",
    "transactionHash": "0xd06a3829cd19f1c0837d81bb8ef57b4faa19c596cb66e2f60c200aab80396996",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "2693514",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ec78b56406dd3962c0facf05a4d695db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BasicNft__DontHaveEnoughTokensToMintNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BasicNft__RoyalityFeesPercentageLimitExceed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BasicNft__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BasicNft__YouDidntProvideApprovalOFTokensForNFTMinting\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFirstOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyalityFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_noOfBips\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"mintNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/BasicNft.sol\":\"BasicNft\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Token.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ncontract MyToken {\\r\\n\\r\\n////////////////////////////State Variables//////////////////////////////////////////\\r\\n    address private admin;\\r\\n    string public constant name = \\\"DEX COIN\\\";\\r\\n    string public constant symbol = \\\"DC\\\";\\r\\n    uint256 public totalSupply = 10000 ether;\\r\\n    uint256 public remainingTokens = totalSupply;\\r\\n    uint256 public pricePerToken = 0.001 ether;\\r\\n    uint256 public immutable decimals;\\r\\n    uint256 private constant VALUE = 1000000000000000000;\\r\\n     uint256 private constant TOKENSFORNFT = 10;\\r\\n\\r\\n    ////////////////////////////Events/////////////////////////////////////////////\\r\\n    event Transfer(\\r\\n        address indexed recipient,\\r\\n        address indexed to,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event Allowance(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n    /////////////////////////////Mappings///////////////////////////////////////////\\r\\n    mapping(address => uint256) private balances;\\r\\n    mapping(address => mapping(address => uint256)) private allowed;\\r\\n\\r\\n////////////////////////Constructor////////////////////////////////////\\r\\n    constructor() {\\r\\n        admin = msg.sender;\\r\\n        decimals = 18;\\r\\n    }\\r\\n\\r\\n/////////////////////////////Modifier/////////////////////////////////\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"You are not allowed to do that\\\");\\r\\n        _;\\r\\n    }\\r\\n/////////////////////////////Main Functions/////////////////////////////////\\r\\n    function buyTokens(uint256 _value) external payable returns (bool) {\\r\\n        remainingTokens = remainingTokens - (VALUE * _value);\\r\\n        require(remainingTokens > 0, \\\"We dont have that much tokens rightnow\\\");\\r\\n        require(msg.value >= pricePerToken * _value);\\r\\n        balances[msg.sender] += VALUE * _value;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n \\r\\n    function withdrawMoney() external onlyAdmin {\\r\\n        require(\\r\\n            address(this).balance > 0,\\r\\n            \\\"Dont have money in the contract to withdraw\\\"\\r\\n        );\\r\\n        payable(admin).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function transfer(address reciever, uint256 amount) external returns (bool) {\\r\\n        require(\\r\\n            balances[msg.sender] >= (VALUE * amount),\\r\\n            \\\"You dont have enough tokens to transfer\\\"\\r\\n        );\\r\\n        balances[msg.sender] -= (VALUE * amount);\\r\\n        balances[reciever] += (VALUE * amount);\\r\\n\\r\\n        emit Transfer(msg.sender, reciever, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) external onlyAdmin {\\r\\n        require(totalSupply >= amount, \\\"You dont have enough tokens to burn\\\");\\r\\n        totalSupply -= amount;\\r\\n        remainingTokens -= amount;\\r\\n    }\\r\\n\\r\\n    function mint(uint256 _amount) external onlyAdmin {\\r\\n        totalSupply += _amount;\\r\\n        remainingTokens += _amount;\\r\\n    }\\r\\n\\r\\n    function approval(address _spender, uint256 _value)\\r\\n        public\\r\\n        returns (bool success)\\r\\n    {\\r\\n        allowed[msg.sender][_spender] = _value;\\r\\n\\r\\n        emit Allowance(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _value\\r\\n    ) public returns (bool success) {\\r\\n        uint256 allowedTokens = allowed[_from][msg.sender];\\r\\n        require(\\r\\n            balances[_from] >=  _value &&\\r\\n                allowedTokens >=   _value\\r\\n        );\\r\\n        balances[_to] +=   _value;\\r\\n        balances[_from] -=   _value;\\r\\n        allowed[_from][msg.sender] -=  _value;\\r\\n\\r\\n        emit Transfer(_from, _to,   _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n///////////////////////Getter Functions////////////////////////////////////\\r\\n       function Contractbalance() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n     function allowance(address _owner, address _spender)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return allowed[_owner][_spender];\\r\\n    }\\r\\n\\r\\n    function balanceOf(address user) public view returns (uint256) {\\r\\n        return balances[user];\\r\\n    }\\r\\n\\r\\n    function owner() public view returns(address) {\\r\\n        return admin;\\r\\n    }\\r\\n\\r\\n    function tokensRequriedForNFTMinting() public pure returns(uint256) {\\r\\n        return VALUE * TOKENSFORNFT;\\r\\n    }\\r\\n\\r\\n    function totalAmount() public view returns(uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x868dc166973b5674e0ec7fa43c90dc7102c9491ddb5660e5a6ad955fcd8fa89a\",\"license\":\"MIT\"},\"contracts/test/BasicNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"../Token.sol\\\";\\r\\n\\r\\nerror BasicNft__RoyalityFeesPercentageLimitExceed();\\r\\nerror BasicNft__DontHaveEnoughTokensToMintNFT();\\r\\nerror BasicNft__YouDidntProvideApprovalOFTokensForNFTMinting();\\r\\nerror BasicNft__TransferFailed();\\r\\ncontract BasicNft is ERC721URIStorage {\\r\\n////////////////////////////////Struct//////////////////////////////////////////\\r\\nstruct Owner {\\r\\n    uint256 numOfBips;\\r\\n    address ownerOfNft;\\r\\n}\\r\\n    ////////////////////////////State Variables//////////////////////////////////\\r\\n    \\r\\n    // string public constant TOKEN_URI =\\r\\n    //     \\\"ipfs://bafybeig37ioir76s7mg5oobetncojcm3c3hxasyd4rvid4jqhy4gkaheg4/?filename=0-PUG.json\\\";\\r\\n    uint256 private s_tokenCounter;\\r\\n\\r\\n    /////////////////////////mapping////////////////////////////////////\\r\\n    mapping(uint256 => Owner) private first_owner;\\r\\n\\r\\n    //////////////////////////Events////////////////////////////////////\\r\\n    event NFTMinted( address indexed owner, address indexed nftAddress, uint256 indexed tokenId);\\r\\n    constructor() ERC721(\\\"Your NFT\\\", \\\"YN\\\") {\\r\\n        s_tokenCounter = 0;\\r\\n    }\\r\\n\\r\\n///////////////////////Main Function////////////////////////////////////\\r\\n\\r\\n    function mintNft(string memory _tokenURI, uint256 _noOfBips, address _token) public returns (uint256) {\\r\\n        MyToken token = MyToken(_token);\\r\\n        uint256 tokensForNFTMinting = token.tokensRequriedForNFTMinting();\\r\\n        if(token.balanceOf(msg.sender) < tokensForNFTMinting){\\r\\n            revert BasicNft__DontHaveEnoughTokensToMintNFT(); \\r\\n        }\\r\\n        if(token.allowance(msg.sender, address(this)) < tokensForNFTMinting) {\\r\\n            revert BasicNft__YouDidntProvideApprovalOFTokensForNFTMinting();\\r\\n        }\\r\\n        if(_noOfBips > 1000) {\\r\\n            revert  BasicNft__RoyalityFeesPercentageLimitExceed();\\r\\n        }\\r\\n        (bool success) = token.transferFrom(msg.sender, address(this), tokensForNFTMinting);\\r\\n\\r\\n        if(!success) {\\r\\n            revert BasicNft__TransferFailed();\\r\\n        }\\r\\n\\r\\n        _safeMint(msg.sender, s_tokenCounter);\\r\\n        _setTokenURI(s_tokenCounter, _tokenURI);\\r\\n        first_owner[s_tokenCounter] = Owner(_noOfBips, msg.sender);\\r\\n        emit NFTMinted(msg.sender, address(this), s_tokenCounter);\\r\\n        s_tokenCounter = s_tokenCounter + 1;\\r\\n        return s_tokenCounter;\\r\\n    }\\r\\n///////////////////////Getter Functions////////////////////////////////////\\r\\n\\r\\n    function getTokenCounter() public view returns (uint256) {\\r\\n        return s_tokenCounter;\\r\\n    }\\r\\n\\r\\n    function getFirstOwner(uint256 tokenId) public view returns(address) {\\r\\n        return first_owner[tokenId].ownerOfNft;\\r\\n    }\\r\\n\\r\\n     function getRoyalityFees(uint256 tokenId) public view returns(uint256) {\\r\\n        return first_owner[tokenId].numOfBips;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x37c0341d84baeb546b7e4df53ec402c9eb24235528e40a0a7e3849af61c7c2a6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600881526020017f596f7572204e46540000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f594e000000000000000000000000000000000000000000000000000000000000815250816000908051906020019062000096929190620000c0565b508060019080519060200190620000af929190620000c0565b5050506000600781905550620001d5565b828054620000ce906200019f565b90600052602060002090601f016020900481019282620000f257600085556200013e565b82601f106200010d57805160ff19168380011785556200013e565b828001600101855582156200013e579182015b828111156200013d57825182559160200191906001019062000120565b5b5090506200014d919062000151565b5090565b5b808211156200016c57600081600090555060010162000152565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001b857607f821691505b60208210811415620001cf57620001ce62000170565b5b50919050565b612f0680620001e56000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80636e02007d116100a2578063b88d4fde11610071578063b88d4fde146102ca578063c7ea4f17146102e6578063c87b56dd14610316578063e985e9c514610346578063f304f39f146103765761010b565b80636e02007d1461024257806370a082311461026057806395d89b4114610290578063a22cb465146102ae5761010b565b806323b872dd116100de57806323b872dd146101aa57806340a58a32146101c657806342842e0e146101f65780636352211e146102125761010b565b806301ffc9a71461011057806306fdde0314610140578063081812fc1461015e578063095ea7b31461018e575b600080fd5b61012a60048036038101906101259190611ddf565b6103a6565b6040516101379190611e27565b60405180910390f35b610148610488565b6040516101559190611edb565b60405180910390f35b61017860048036038101906101739190611f33565b61051a565b6040516101859190611fa1565b60405180910390f35b6101a860048036038101906101a39190611fe8565b610560565b005b6101c460048036038101906101bf9190612028565b610678565b005b6101e060048036038101906101db9190611f33565b6106d8565b6040516101ed9190611fa1565b60405180910390f35b610210600480360381019061020b9190612028565b610718565b005b61022c60048036038101906102279190611f33565b610738565b6040516102399190611fa1565b60405180910390f35b61024a6107ea565b604051610257919061208a565b60405180910390f35b61027a600480360381019061027591906120a5565b6107f4565b604051610287919061208a565b60405180910390f35b6102986108ac565b6040516102a59190611edb565b60405180910390f35b6102c860048036038101906102c391906120fe565b61093e565b005b6102e460048036038101906102df9190612273565b610954565b005b61030060048036038101906102fb9190611f33565b6109b6565b60405161030d919061208a565b60405180910390f35b610330600480360381019061032b9190611f33565b6109d6565b60405161033d9190611edb565b60405180910390f35b610360600480360381019061035b91906122f6565b610ae9565b60405161036d9190611e27565b60405180910390f35b610390600480360381019061038b91906123d7565b610b7d565b60405161039d919061208a565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061047157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610481575061048082610fbe565b5b9050919050565b60606000805461049790612475565b80601f01602080910402602001604051908101604052809291908181526020018280546104c390612475565b80156105105780601f106104e557610100808354040283529160200191610510565b820191906000526020600020905b8154815290600101906020018083116104f357829003601f168201915b5050505050905090565b600061052582611028565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061056b82610738565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d390612519565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105fb611073565b73ffffffffffffffffffffffffffffffffffffffff16148061062a575061062981610624611073565b610ae9565b5b610669576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610660906125ab565b60405180910390fd5b610673838361107b565b505050565b610689610683611073565b82611134565b6106c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf9061263d565b60405180910390fd5b6106d38383836111c9565b505050565b60006008600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b61073383838360405180602001604052806000815250610954565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d8906126a9565b60405180910390fd5b80915050919050565b6000600754905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610865576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085c9061273b565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600180546108bb90612475565b80601f01602080910402602001604051908101604052809291908181526020018280546108e790612475565b80156109345780601f1061090957610100808354040283529160200191610934565b820191906000526020600020905b81548152906001019060200180831161091757829003601f168201915b5050505050905090565b610950610949611073565b8383611430565b5050565b61096561095f611073565b83611134565b6109a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099b9061263d565b60405180910390fd5b6109b08484848461159d565b50505050565b600060086000838152602001908152602001600020600001549050919050565b60606109e182611028565b6000600660008481526020019081526020016000208054610a0190612475565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2d90612475565b8015610a7a5780601f10610a4f57610100808354040283529160200191610a7a565b820191906000526020600020905b815481529060010190602001808311610a5d57829003601f168201915b505050505090506000610a8b6115f9565b9050600081511415610aa1578192505050610ae4565b600082511115610ad6578082604051602001610abe929190612797565b60405160208183030381529060405292505050610ae4565b610adf84611610565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff1663064c30806040518163ffffffff1660e01b815260040160206040518083038186803b158015610bcb57600080fd5b505afa158015610bdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0391906127d0565b9050808273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610c3f9190611fa1565b60206040518083038186803b158015610c5757600080fd5b505afa158015610c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8f91906127d0565b1015610cc7576040517f2071d48900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808273ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610d039291906127fd565b60206040518083038186803b158015610d1b57600080fd5b505afa158015610d2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5391906127d0565b1015610d8b576040517f433e6c4500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103e8851115610dc7576040517fd495f56700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610e0693929190612826565b602060405180830381600087803b158015610e2057600080fd5b505af1158015610e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e589190612872565b905080610e91576040517f1cecfda100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e9d33600754611678565b610ea960075488611696565b60405180604001604052808781526020013373ffffffffffffffffffffffffffffffffffffffff168152506008600060075481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506007543073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f2f7377f0470ca5f5d5bcb55c33ff5e20e0a2653933e0615e99f01e81640d0a9260405160405180910390a46001600754610fa991906128ce565b60078190555060075493505050509392505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6110318161170a565b611070576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611067906126a9565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166110ee83610738565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061114083610738565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061118257506111818185610ae9565b5b806111c057508373ffffffffffffffffffffffffffffffffffffffff166111a88461051a565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166111e982610738565b73ffffffffffffffffffffffffffffffffffffffff161461123f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123690612996565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156112af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a690612a28565b60405180910390fd5b6112ba838383611776565b6112c560008261107b565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113159190612a48565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461136c91906128ce565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461142b83838361177b565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561149f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149690612ac8565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115909190611e27565b60405180910390a3505050565b6115a88484846111c9565b6115b484848484611780565b6115f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ea90612b5a565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061161b82611028565b60006116256115f9565b905060008151116116455760405180602001604052806000815250611670565b8061164f84611917565b604051602001611660929190612797565b6040516020818303038152906040525b915050919050565b611692828260405180602001604052806000815250611a78565b5050565b61169f8261170a565b6116de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d590612bec565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611705929190611cd0565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b60006117a18473ffffffffffffffffffffffffffffffffffffffff16611ad3565b1561190a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026117ca611073565b8786866040518563ffffffff1660e01b81526004016117ec9493929190612c61565b602060405180830381600087803b15801561180657600080fd5b505af192505050801561183757506040513d601f19601f820116820180604052508101906118349190612cc2565b60015b6118ba573d8060008114611867576040519150601f19603f3d011682016040523d82523d6000602084013e61186c565b606091505b506000815114156118b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a990612b5a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061190f565b600190505b949350505050565b6060600082141561195f576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611a73565b600082905060005b6000821461199157808061197a90612cef565b915050600a8261198a9190612d67565b9150611967565b60008167ffffffffffffffff8111156119ad576119ac612148565b5b6040519080825280601f01601f1916602001820160405280156119df5781602001600182028036833780820191505090505b5090505b60008514611a6c576001826119f89190612a48565b9150600a85611a079190612d98565b6030611a1391906128ce565b60f81b818381518110611a2957611a28612dc9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611a659190612d67565b94506119e3565b8093505050505b919050565b611a828383611af6565b611a8f6000848484611780565b611ace576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac590612b5a565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5d90612e44565b60405180910390fd5b611b6f8161170a565b15611baf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba690612eb0565b60405180910390fd5b611bbb60008383611776565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c0b91906128ce565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611ccc6000838361177b565b5050565b828054611cdc90612475565b90600052602060002090601f016020900481019282611cfe5760008555611d45565b82601f10611d1757805160ff1916838001178555611d45565b82800160010185558215611d45579182015b82811115611d44578251825591602001919060010190611d29565b5b509050611d529190611d56565b5090565b5b80821115611d6f576000816000905550600101611d57565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611dbc81611d87565b8114611dc757600080fd5b50565b600081359050611dd981611db3565b92915050565b600060208284031215611df557611df4611d7d565b5b6000611e0384828501611dca565b91505092915050565b60008115159050919050565b611e2181611e0c565b82525050565b6000602082019050611e3c6000830184611e18565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e7c578082015181840152602081019050611e61565b83811115611e8b576000848401525b50505050565b6000601f19601f8301169050919050565b6000611ead82611e42565b611eb78185611e4d565b9350611ec7818560208601611e5e565b611ed081611e91565b840191505092915050565b60006020820190508181036000830152611ef58184611ea2565b905092915050565b6000819050919050565b611f1081611efd565b8114611f1b57600080fd5b50565b600081359050611f2d81611f07565b92915050565b600060208284031215611f4957611f48611d7d565b5b6000611f5784828501611f1e565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f8b82611f60565b9050919050565b611f9b81611f80565b82525050565b6000602082019050611fb66000830184611f92565b92915050565b611fc581611f80565b8114611fd057600080fd5b50565b600081359050611fe281611fbc565b92915050565b60008060408385031215611fff57611ffe611d7d565b5b600061200d85828601611fd3565b925050602061201e85828601611f1e565b9150509250929050565b60008060006060848603121561204157612040611d7d565b5b600061204f86828701611fd3565b935050602061206086828701611fd3565b925050604061207186828701611f1e565b9150509250925092565b61208481611efd565b82525050565b600060208201905061209f600083018461207b565b92915050565b6000602082840312156120bb576120ba611d7d565b5b60006120c984828501611fd3565b91505092915050565b6120db81611e0c565b81146120e657600080fd5b50565b6000813590506120f8816120d2565b92915050565b6000806040838503121561211557612114611d7d565b5b600061212385828601611fd3565b9250506020612134858286016120e9565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61218082611e91565b810181811067ffffffffffffffff8211171561219f5761219e612148565b5b80604052505050565b60006121b2611d73565b90506121be8282612177565b919050565b600067ffffffffffffffff8211156121de576121dd612148565b5b6121e782611e91565b9050602081019050919050565b82818337600083830152505050565b6000612216612211846121c3565b6121a8565b90508281526020810184848401111561223257612231612143565b5b61223d8482856121f4565b509392505050565b600082601f83011261225a5761225961213e565b5b813561226a848260208601612203565b91505092915050565b6000806000806080858703121561228d5761228c611d7d565b5b600061229b87828801611fd3565b94505060206122ac87828801611fd3565b93505060406122bd87828801611f1e565b925050606085013567ffffffffffffffff8111156122de576122dd611d82565b5b6122ea87828801612245565b91505092959194509250565b6000806040838503121561230d5761230c611d7d565b5b600061231b85828601611fd3565b925050602061232c85828601611fd3565b9150509250929050565b600067ffffffffffffffff82111561235157612350612148565b5b61235a82611e91565b9050602081019050919050565b600061237a61237584612336565b6121a8565b90508281526020810184848401111561239657612395612143565b5b6123a18482856121f4565b509392505050565b600082601f8301126123be576123bd61213e565b5b81356123ce848260208601612367565b91505092915050565b6000806000606084860312156123f0576123ef611d7d565b5b600084013567ffffffffffffffff81111561240e5761240d611d82565b5b61241a868287016123a9565b935050602061242b86828701611f1e565b925050604061243c86828701611fd3565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061248d57607f821691505b602082108114156124a1576124a0612446565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612503602183611e4d565b915061250e826124a7565b604082019050919050565b60006020820190508181036000830152612532816124f6565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612595603e83611e4d565b91506125a082612539565b604082019050919050565b600060208201905081810360008301526125c481612588565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612627602e83611e4d565b9150612632826125cb565b604082019050919050565b600060208201905081810360008301526126568161261a565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612693601883611e4d565b915061269e8261265d565b602082019050919050565b600060208201905081810360008301526126c281612686565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612725602983611e4d565b9150612730826126c9565b604082019050919050565b6000602082019050818103600083015261275481612718565b9050919050565b600081905092915050565b600061277182611e42565b61277b818561275b565b935061278b818560208601611e5e565b80840191505092915050565b60006127a38285612766565b91506127af8284612766565b91508190509392505050565b6000815190506127ca81611f07565b92915050565b6000602082840312156127e6576127e5611d7d565b5b60006127f4848285016127bb565b91505092915050565b60006040820190506128126000830185611f92565b61281f6020830184611f92565b9392505050565b600060608201905061283b6000830186611f92565b6128486020830185611f92565b612855604083018461207b565b949350505050565b60008151905061286c816120d2565b92915050565b60006020828403121561288857612887611d7d565b5b60006128968482850161285d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128d982611efd565b91506128e483611efd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156129195761291861289f565b5b828201905092915050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612980602583611e4d565b915061298b82612924565b604082019050919050565b600060208201905081810360008301526129af81612973565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612a12602483611e4d565b9150612a1d826129b6565b604082019050919050565b60006020820190508181036000830152612a4181612a05565b9050919050565b6000612a5382611efd565b9150612a5e83611efd565b925082821015612a7157612a7061289f565b5b828203905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612ab2601983611e4d565b9150612abd82612a7c565b602082019050919050565b60006020820190508181036000830152612ae181612aa5565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612b44603283611e4d565b9150612b4f82612ae8565b604082019050919050565b60006020820190508181036000830152612b7381612b37565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000612bd6602e83611e4d565b9150612be182612b7a565b604082019050919050565b60006020820190508181036000830152612c0581612bc9565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612c3382612c0c565b612c3d8185612c17565b9350612c4d818560208601611e5e565b612c5681611e91565b840191505092915050565b6000608082019050612c766000830187611f92565b612c836020830186611f92565b612c90604083018561207b565b8181036060830152612ca28184612c28565b905095945050505050565b600081519050612cbc81611db3565b92915050565b600060208284031215612cd857612cd7611d7d565b5b6000612ce684828501612cad565b91505092915050565b6000612cfa82611efd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d2d57612d2c61289f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612d7282611efd565b9150612d7d83611efd565b925082612d8d57612d8c612d38565b5b828204905092915050565b6000612da382611efd565b9150612dae83611efd565b925082612dbe57612dbd612d38565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612e2e602083611e4d565b9150612e3982612df8565b602082019050919050565b60006020820190508181036000830152612e5d81612e21565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612e9a601c83611e4d565b9150612ea582612e64565b602082019050919050565b60006020820190508181036000830152612ec981612e8d565b905091905056fea264697066735822122017976973b549db0a1fef63639ab5a88f86aa43e98365d406eb62ff9e9ecfb29f64736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80636e02007d116100a2578063b88d4fde11610071578063b88d4fde146102ca578063c7ea4f17146102e6578063c87b56dd14610316578063e985e9c514610346578063f304f39f146103765761010b565b80636e02007d1461024257806370a082311461026057806395d89b4114610290578063a22cb465146102ae5761010b565b806323b872dd116100de57806323b872dd146101aa57806340a58a32146101c657806342842e0e146101f65780636352211e146102125761010b565b806301ffc9a71461011057806306fdde0314610140578063081812fc1461015e578063095ea7b31461018e575b600080fd5b61012a60048036038101906101259190611ddf565b6103a6565b6040516101379190611e27565b60405180910390f35b610148610488565b6040516101559190611edb565b60405180910390f35b61017860048036038101906101739190611f33565b61051a565b6040516101859190611fa1565b60405180910390f35b6101a860048036038101906101a39190611fe8565b610560565b005b6101c460048036038101906101bf9190612028565b610678565b005b6101e060048036038101906101db9190611f33565b6106d8565b6040516101ed9190611fa1565b60405180910390f35b610210600480360381019061020b9190612028565b610718565b005b61022c60048036038101906102279190611f33565b610738565b6040516102399190611fa1565b60405180910390f35b61024a6107ea565b604051610257919061208a565b60405180910390f35b61027a600480360381019061027591906120a5565b6107f4565b604051610287919061208a565b60405180910390f35b6102986108ac565b6040516102a59190611edb565b60405180910390f35b6102c860048036038101906102c391906120fe565b61093e565b005b6102e460048036038101906102df9190612273565b610954565b005b61030060048036038101906102fb9190611f33565b6109b6565b60405161030d919061208a565b60405180910390f35b610330600480360381019061032b9190611f33565b6109d6565b60405161033d9190611edb565b60405180910390f35b610360600480360381019061035b91906122f6565b610ae9565b60405161036d9190611e27565b60405180910390f35b610390600480360381019061038b91906123d7565b610b7d565b60405161039d919061208a565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061047157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610481575061048082610fbe565b5b9050919050565b60606000805461049790612475565b80601f01602080910402602001604051908101604052809291908181526020018280546104c390612475565b80156105105780601f106104e557610100808354040283529160200191610510565b820191906000526020600020905b8154815290600101906020018083116104f357829003601f168201915b5050505050905090565b600061052582611028565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061056b82610738565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d390612519565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105fb611073565b73ffffffffffffffffffffffffffffffffffffffff16148061062a575061062981610624611073565b610ae9565b5b610669576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610660906125ab565b60405180910390fd5b610673838361107b565b505050565b610689610683611073565b82611134565b6106c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf9061263d565b60405180910390fd5b6106d38383836111c9565b505050565b60006008600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b61073383838360405180602001604052806000815250610954565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d8906126a9565b60405180910390fd5b80915050919050565b6000600754905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610865576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085c9061273b565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600180546108bb90612475565b80601f01602080910402602001604051908101604052809291908181526020018280546108e790612475565b80156109345780601f1061090957610100808354040283529160200191610934565b820191906000526020600020905b81548152906001019060200180831161091757829003601f168201915b5050505050905090565b610950610949611073565b8383611430565b5050565b61096561095f611073565b83611134565b6109a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099b9061263d565b60405180910390fd5b6109b08484848461159d565b50505050565b600060086000838152602001908152602001600020600001549050919050565b60606109e182611028565b6000600660008481526020019081526020016000208054610a0190612475565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2d90612475565b8015610a7a5780601f10610a4f57610100808354040283529160200191610a7a565b820191906000526020600020905b815481529060010190602001808311610a5d57829003601f168201915b505050505090506000610a8b6115f9565b9050600081511415610aa1578192505050610ae4565b600082511115610ad6578082604051602001610abe929190612797565b60405160208183030381529060405292505050610ae4565b610adf84611610565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff1663064c30806040518163ffffffff1660e01b815260040160206040518083038186803b158015610bcb57600080fd5b505afa158015610bdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0391906127d0565b9050808273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610c3f9190611fa1565b60206040518083038186803b158015610c5757600080fd5b505afa158015610c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8f91906127d0565b1015610cc7576040517f2071d48900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808273ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610d039291906127fd565b60206040518083038186803b158015610d1b57600080fd5b505afa158015610d2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5391906127d0565b1015610d8b576040517f433e6c4500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103e8851115610dc7576040517fd495f56700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610e0693929190612826565b602060405180830381600087803b158015610e2057600080fd5b505af1158015610e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e589190612872565b905080610e91576040517f1cecfda100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e9d33600754611678565b610ea960075488611696565b60405180604001604052808781526020013373ffffffffffffffffffffffffffffffffffffffff168152506008600060075481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506007543073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f2f7377f0470ca5f5d5bcb55c33ff5e20e0a2653933e0615e99f01e81640d0a9260405160405180910390a46001600754610fa991906128ce565b60078190555060075493505050509392505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6110318161170a565b611070576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611067906126a9565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166110ee83610738565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061114083610738565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061118257506111818185610ae9565b5b806111c057508373ffffffffffffffffffffffffffffffffffffffff166111a88461051a565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166111e982610738565b73ffffffffffffffffffffffffffffffffffffffff161461123f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123690612996565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156112af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a690612a28565b60405180910390fd5b6112ba838383611776565b6112c560008261107b565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113159190612a48565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461136c91906128ce565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461142b83838361177b565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561149f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149690612ac8565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115909190611e27565b60405180910390a3505050565b6115a88484846111c9565b6115b484848484611780565b6115f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ea90612b5a565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061161b82611028565b60006116256115f9565b905060008151116116455760405180602001604052806000815250611670565b8061164f84611917565b604051602001611660929190612797565b6040516020818303038152906040525b915050919050565b611692828260405180602001604052806000815250611a78565b5050565b61169f8261170a565b6116de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d590612bec565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611705929190611cd0565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b60006117a18473ffffffffffffffffffffffffffffffffffffffff16611ad3565b1561190a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026117ca611073565b8786866040518563ffffffff1660e01b81526004016117ec9493929190612c61565b602060405180830381600087803b15801561180657600080fd5b505af192505050801561183757506040513d601f19601f820116820180604052508101906118349190612cc2565b60015b6118ba573d8060008114611867576040519150601f19603f3d011682016040523d82523d6000602084013e61186c565b606091505b506000815114156118b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a990612b5a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061190f565b600190505b949350505050565b6060600082141561195f576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611a73565b600082905060005b6000821461199157808061197a90612cef565b915050600a8261198a9190612d67565b9150611967565b60008167ffffffffffffffff8111156119ad576119ac612148565b5b6040519080825280601f01601f1916602001820160405280156119df5781602001600182028036833780820191505090505b5090505b60008514611a6c576001826119f89190612a48565b9150600a85611a079190612d98565b6030611a1391906128ce565b60f81b818381518110611a2957611a28612dc9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611a659190612d67565b94506119e3565b8093505050505b919050565b611a828383611af6565b611a8f6000848484611780565b611ace576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac590612b5a565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5d90612e44565b60405180910390fd5b611b6f8161170a565b15611baf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba690612eb0565b60405180910390fd5b611bbb60008383611776565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c0b91906128ce565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611ccc6000838361177b565b5050565b828054611cdc90612475565b90600052602060002090601f016020900481019282611cfe5760008555611d45565b82601f10611d1757805160ff1916838001178555611d45565b82800160010185558215611d45579182015b82811115611d44578251825591602001919060010190611d29565b5b509050611d529190611d56565b5090565b5b80821115611d6f576000816000905550600101611d57565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611dbc81611d87565b8114611dc757600080fd5b50565b600081359050611dd981611db3565b92915050565b600060208284031215611df557611df4611d7d565b5b6000611e0384828501611dca565b91505092915050565b60008115159050919050565b611e2181611e0c565b82525050565b6000602082019050611e3c6000830184611e18565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e7c578082015181840152602081019050611e61565b83811115611e8b576000848401525b50505050565b6000601f19601f8301169050919050565b6000611ead82611e42565b611eb78185611e4d565b9350611ec7818560208601611e5e565b611ed081611e91565b840191505092915050565b60006020820190508181036000830152611ef58184611ea2565b905092915050565b6000819050919050565b611f1081611efd565b8114611f1b57600080fd5b50565b600081359050611f2d81611f07565b92915050565b600060208284031215611f4957611f48611d7d565b5b6000611f5784828501611f1e565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f8b82611f60565b9050919050565b611f9b81611f80565b82525050565b6000602082019050611fb66000830184611f92565b92915050565b611fc581611f80565b8114611fd057600080fd5b50565b600081359050611fe281611fbc565b92915050565b60008060408385031215611fff57611ffe611d7d565b5b600061200d85828601611fd3565b925050602061201e85828601611f1e565b9150509250929050565b60008060006060848603121561204157612040611d7d565b5b600061204f86828701611fd3565b935050602061206086828701611fd3565b925050604061207186828701611f1e565b9150509250925092565b61208481611efd565b82525050565b600060208201905061209f600083018461207b565b92915050565b6000602082840312156120bb576120ba611d7d565b5b60006120c984828501611fd3565b91505092915050565b6120db81611e0c565b81146120e657600080fd5b50565b6000813590506120f8816120d2565b92915050565b6000806040838503121561211557612114611d7d565b5b600061212385828601611fd3565b9250506020612134858286016120e9565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61218082611e91565b810181811067ffffffffffffffff8211171561219f5761219e612148565b5b80604052505050565b60006121b2611d73565b90506121be8282612177565b919050565b600067ffffffffffffffff8211156121de576121dd612148565b5b6121e782611e91565b9050602081019050919050565b82818337600083830152505050565b6000612216612211846121c3565b6121a8565b90508281526020810184848401111561223257612231612143565b5b61223d8482856121f4565b509392505050565b600082601f83011261225a5761225961213e565b5b813561226a848260208601612203565b91505092915050565b6000806000806080858703121561228d5761228c611d7d565b5b600061229b87828801611fd3565b94505060206122ac87828801611fd3565b93505060406122bd87828801611f1e565b925050606085013567ffffffffffffffff8111156122de576122dd611d82565b5b6122ea87828801612245565b91505092959194509250565b6000806040838503121561230d5761230c611d7d565b5b600061231b85828601611fd3565b925050602061232c85828601611fd3565b9150509250929050565b600067ffffffffffffffff82111561235157612350612148565b5b61235a82611e91565b9050602081019050919050565b600061237a61237584612336565b6121a8565b90508281526020810184848401111561239657612395612143565b5b6123a18482856121f4565b509392505050565b600082601f8301126123be576123bd61213e565b5b81356123ce848260208601612367565b91505092915050565b6000806000606084860312156123f0576123ef611d7d565b5b600084013567ffffffffffffffff81111561240e5761240d611d82565b5b61241a868287016123a9565b935050602061242b86828701611f1e565b925050604061243c86828701611fd3565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061248d57607f821691505b602082108114156124a1576124a0612446565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612503602183611e4d565b915061250e826124a7565b604082019050919050565b60006020820190508181036000830152612532816124f6565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612595603e83611e4d565b91506125a082612539565b604082019050919050565b600060208201905081810360008301526125c481612588565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612627602e83611e4d565b9150612632826125cb565b604082019050919050565b600060208201905081810360008301526126568161261a565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612693601883611e4d565b915061269e8261265d565b602082019050919050565b600060208201905081810360008301526126c281612686565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612725602983611e4d565b9150612730826126c9565b604082019050919050565b6000602082019050818103600083015261275481612718565b9050919050565b600081905092915050565b600061277182611e42565b61277b818561275b565b935061278b818560208601611e5e565b80840191505092915050565b60006127a38285612766565b91506127af8284612766565b91508190509392505050565b6000815190506127ca81611f07565b92915050565b6000602082840312156127e6576127e5611d7d565b5b60006127f4848285016127bb565b91505092915050565b60006040820190506128126000830185611f92565b61281f6020830184611f92565b9392505050565b600060608201905061283b6000830186611f92565b6128486020830185611f92565b612855604083018461207b565b949350505050565b60008151905061286c816120d2565b92915050565b60006020828403121561288857612887611d7d565b5b60006128968482850161285d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128d982611efd565b91506128e483611efd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156129195761291861289f565b5b828201905092915050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612980602583611e4d565b915061298b82612924565b604082019050919050565b600060208201905081810360008301526129af81612973565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612a12602483611e4d565b9150612a1d826129b6565b604082019050919050565b60006020820190508181036000830152612a4181612a05565b9050919050565b6000612a5382611efd565b9150612a5e83611efd565b925082821015612a7157612a7061289f565b5b828203905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612ab2601983611e4d565b9150612abd82612a7c565b602082019050919050565b60006020820190508181036000830152612ae181612aa5565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612b44603283611e4d565b9150612b4f82612ae8565b604082019050919050565b60006020820190508181036000830152612b7381612b37565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000612bd6602e83611e4d565b9150612be182612b7a565b604082019050919050565b60006020820190508181036000830152612c0581612bc9565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612c3382612c0c565b612c3d8185612c17565b9350612c4d818560208601611e5e565b612c5681611e91565b840191505092915050565b6000608082019050612c766000830187611f92565b612c836020830186611f92565b612c90604083018561207b565b8181036060830152612ca28184612c28565b905095945050505050565b600081519050612cbc81611db3565b92915050565b600060208284031215612cd857612cd7611d7d565b5b6000612ce684828501612cad565b91505092915050565b6000612cfa82611efd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d2d57612d2c61289f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612d7282611efd565b9150612d7d83611efd565b925082612d8d57612d8c612d38565b5b828204905092915050565b6000612da382611efd565b9150612dae83611efd565b925082612dbe57612dbd612d38565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612e2e602083611e4d565b9150612e3982612df8565b602082019050919050565b60006020820190508181036000830152612e5d81612e21565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612e9a601c83611e4d565b9150612ea582612e64565b602082019050919050565b60006020820190508181036000830152612ec981612e8d565b905091905056fea264697066735822122017976973b549db0a1fef63639ab5a88f86aa43e98365d406eb62ff9e9ecfb29f64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 65,
        "contract": "contracts/test/BasicNft.sol:BasicNft",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 67,
        "contract": "contracts/test/BasicNft.sol:BasicNft",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/test/BasicNft.sol:BasicNft",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 75,
        "contract": "contracts/test/BasicNft.sol:BasicNft",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 79,
        "contract": "contracts/test/BasicNft.sol:BasicNft",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 85,
        "contract": "contracts/test/BasicNft.sol:BasicNft",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1053,
        "contract": "contracts/test/BasicNft.sol:BasicNft",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2859,
        "contract": "contracts/test/BasicNft.sol:BasicNft",
        "label": "s_tokenCounter",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2864,
        "contract": "contracts/test/BasicNft.sol:BasicNft",
        "label": "first_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Owner)2857_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Owner)2857_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BasicNft.Owner)",
        "numberOfBytes": "32",
        "value": "t_struct(Owner)2857_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Owner)2857_storage": {
        "encoding": "inplace",
        "label": "struct BasicNft.Owner",
        "members": [
          {
            "astId": 2854,
            "contract": "contracts/test/BasicNft.sol:BasicNft",
            "label": "numOfBips",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2856,
            "contract": "contracts/test/BasicNft.sol:BasicNft",
            "label": "ownerOfNft",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}